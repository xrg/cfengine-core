#######################################################
#
# Test the * functions()
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "dummy" string => "dummy";
}

#######################################################

bundle agent test
{
  vars:
      "tests" slist => { "q1", "q2", "q3" };
      "offsets" ilist => { "0", "1", "20", "26", "27", "28" };
      "fn1" slist => { "head", "tail" };
      "data[q1]" string => "this is the Question";
      "data[q2]" string => "";
      "data[q3]" string => "some text is not $(const.t) simple

";

      "data[$(tests)_reversestring]" string => reversestring("$(data[$(tests)])");
      "data[$(tests)_strlen]" int => strlen("$(data[$(tests)])");
      "data[$(tests)_upcase]" string => upcase("$(data[$(tests)])");
      "data[$(tests)_downcase]" string => downcase("$(data[$(tests)])");
      "data[$(tests)_head_$(offsets)]" string => head("$(data[$(tests)])", $(offsets));
      "data[$(tests)_tail_$(offsets)]" string => tail("$(data[$(tests)])", $(offsets));

      "expected[q1_reversestring]" string => "noitseuQ eht si siht";
      "expected[q1_strlen]" int => "20";
      "expected[q1_upcase]" string => "THIS IS THE QUESTION";
      "expected[q1_downcase]" string => "this is the question";
      "expected[q1_head_0]" string => "";
      "expected[q1_tail_0]" string => "";
      "expected[q1_head_1]" string => "t";
      "expected[q1_tail_1]" string => "n";
      "expected[q1_$(fn1)_20]" string => "$(data[q1])";
      "expected[q1_$(fn1)_26]" string => "$(data[q1])";
      "expected[q1_$(fn1)_27]" string => "$(data[q1])";
      "expected[q1_$(fn1)_28]" string => "$(data[q1])";

      "expected[q2_reversestring]" string => "";
      "expected[q2_strlen]" int => "0";
      "expected[q2_upcase]" string => "";
      "expected[q2_downcase]" string => "";
      "expected[q2_$(fn1)_$(offsets)]" string => "";

      "expected[q3_reversestring]" string => "

elpmis $(const.t) ton si txet emos";
      "expected[q3_strlen]" int => "27";
      "expected[q3_upcase]" string => "SOME TEXT IS NOT $(const.t) SIMPLE

";
      "expected[q3_downcase]" string => "$(data[q3])";
      "expected[q3_$(fn1)_0]" string => "";
      "expected[q3_head_1]" string => "s";
      "expected[q3_tail_1]" string => "
";
      "expected[q3_head_20]" string => "some text is not $(const.t) s";
      "expected[q3_tail_20]" string => "xt is not $(const.t) simple

";
      "expected[q3_head_26]" string => "some text is not $(const.t) simple
";
      "expected[q3_tail_26]" string => "ome text is not $(const.t) simple

";
      "expected[q3_$(fn1)_27]" string => "$(data[q3])";
      "expected[q3_$(fn1)_28]" string => "$(data[q3])";
}

#######################################################

bundle agent check
{
  vars:
      "tests" slist => { @(test.tests) };
      "fn0" slist => { "reversestring", "strlen", "upcase", "downcase" };
      "fn1" slist => { @(test.fn1) };
      "offsets" ilist => { @(test.offsets) };

  classes:
      "ok_$(tests)_$(fn0)" expression => strcmp("$(test.expected[$(tests)_$(fn0)])",
                                                "$(test.data[$(tests)_$(fn0)])");

      "not_ok_$(tests)_$(fn0)" not => strcmp("$(test.expected[$(tests)_$(fn0)])",
                                             "$(test.data[$(tests)_$(fn0)])");

      "ok_$(tests)_$(fn1)_$(offsets)" expression => strcmp("$(test.expected[$(tests)_$(fn1)_$(offsets)])",
                                                           "$(test.data[$(tests)_$(fn1)_$(offsets)])");

      "not_ok_$(tests)_$(fn1)_$(offsets)" not => strcmp("$(test.expected[$(tests)_$(fn1)_$(offsets)])",
                                                        "$(test.data[$(tests)_$(fn1)_$(offsets)])");

      "ok" and => { 'ok_q1_reversestring', 'ok_q2_reversestring', 'ok_q3_reversestring',
                    'ok_q1_strlen', 'ok_q2_strlen', 'ok_q3_strlen',
                    'ok_q1_upcase', 'ok_q2_upcase', 'ok_q3_upcase',
                    'ok_q1_downcase', 'ok_q2_downcase', 'ok_q3_downcase',

                    'ok_q1_head_0', 'ok_q2_head_0', 'ok_q3_head_0', 'ok_q1_tail_0',
                    'ok_q2_tail_0', 'ok_q3_tail_0', 'ok_q1_head_1', 'ok_q2_head_1',
                    'ok_q3_head_1', 'ok_q1_tail_1', 'ok_q2_tail_1', 'ok_q3_tail_1',
                    'ok_q1_head_20', 'ok_q2_head_20', 'ok_q3_head_20', 'ok_q1_tail_20',
                    'ok_q2_tail_20', 'ok_q3_tail_20', 'ok_q1_head_26', 'ok_q2_head_26',
                    'ok_q3_head_26', 'ok_q1_tail_26', 'ok_q2_tail_26', 'ok_q3_tail_26',
                    'ok_q1_head_27', 'ok_q2_head_27', 'ok_q3_head_27', 'ok_q1_tail_27',
                    'ok_q2_tail_27', 'ok_q3_tail_27', 'ok_q1_head_28', 'ok_q2_head_28',
                    'ok_q3_head_28', 'ok_q1_tail_28', 'ok_q2_tail_28', 'ok_q3_tail_28'
      };

  reports:
    DEBUG::
      "OK: test $(tests) with function $(fn0) passes"
      ifvarclass => "ok_$(tests)_$(fn0)";

      "NOT OK: test $(tests) with function $(fn0) failed; expected = '$(test.expected[$(tests)_$(fn0)])' actual = '$(test.data[$(tests)_$(fn0)])'"
      ifvarclass => "not_ok_$(tests)_$(fn0)";

      "OK: test $(tests) with function $(fn1)($(offsets)) passes"
      ifvarclass => "ok_$(tests)_$(fn1)_$(offsets)";

      "NOT OK: test $(tests) with function $(fn1)($(offsets)) failed; expected = '$(test.expected[$(tests)_$(fn1)_$(offsets)])' actual = '$(test.data[$(tests)_$(fn1)_$(offsets)])'"
      ifvarclass => "not_ok_$(tests)_$(fn1)_$(offsets)";

    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}

