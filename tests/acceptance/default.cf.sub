########################################################################
# Acceptance test framework.
#
# See README for details about writing test cases.
########################################################################

bundle common G
{
  vars:
    windows::
      "cwd" string => execresult("C:\windows\system32\cmd.exe /C cd", "noshell");
      # Use for redirection, not as a real file.
      "dev_null" string => "nul";
      "exeext" slist => { ".exe", ".bat" };
    !windows::
      "cwd" string => execresult("/bin/pwd 2>/dev/null || /usr/bin/pwd", "useshell");
      # Use for redirection, not as a real file.
      "dev_null" string => "/dev/null";
      "exeext" string => "";

    any::
      "cmds" slist => { "date", "diff", "echo", "egrep", "false", "grep", "gzip", "hexdump",
                        "ln", "mkdir", "od", "perl", "printf", "pwd", "rm", "sort", "touch",
                        "true", "wc", "cat", "sed", "psexec", "seq" };

    !windows::
      "paths[bin]" string                    => "/bin";
      "paths[usr_bin]" string                => "/usr/bin";
      "paths[usr_local_bin]" string          => "/usr/local/bin";
      "paths[usr_contrib_bin]" string        => "/usr/contrib/bin";
    windows::
      "paths[mingw_msys_1_0_bin]" string     => "c:\\mingw\\msys\\1.0\\bin";
      "paths[msys_1_0_bin]" string           => "c:\\msys\\1.0\\bin";
      "paths[msys_bin]" string               => "c:\\msys\\bin";
      "paths[pstools]" string                => "c:\\PSTools";
      "paths[strawberry_perl_bin]" string    => "c:\\strawberry\\perl\\bin";
      "paths[local]" string                  => "$(this.promise_dirname)\\tool_wrappers";

    any::
      "paths_indices" slist => getindices("paths");

  classes:
      "$(paths_indices)_$(cmds)$(exeext)" expression => fileexists("$(paths[$(paths_indices)])$(const.dirsep)$(cmds)$(exeext)");
      "has_$(cmds)"                       expression => fileexists("$(paths[$(paths_indices)])$(const.dirsep)$(cmds)$(exeext)"),
      scope => "namespace";

  vars:
      "$(cmds)" string => "$(paths[$(paths_indices)])$(const.dirsep)$(cmds)$(exeext)",
      ifvarclass => canonify("$(paths_indices)_$(cmds)$(exeext)");

  classes:
      "temp_declared" not => strcmp(getenv("TEMP", "65536"), "");

  vars:
      "etc" string => "$(this.promise_dirname)$(const.dirsep)dummy_etc";
      "etc_motd" string => "$(this.promise_dirname)$(const.dirsep)dummy_etc$(const.dirsep)motd";
      "etc_passwd" string => "$(this.promise_dirname)$(const.dirsep)dummy_etc$(const.dirsep)passwd";
      "etc_shadow" string => "$(this.promise_dirname)$(const.dirsep)dummy_etc$(const.dirsep)shadow";
      "etc_group" string => "$(this.promise_dirname)$(const.dirsep)dummy_etc$(const.dirsep)group";
      # Use instead of /dev/null when you need a real empty file to open.
      "etc_null" string => "$(this.promise_dirname)$(const.dirsep)dummy_etc$(const.dirsep)null";

    temp_declared::
      "testroot" string => getenv("TEMP", "65535");
      "testdir" string => concat(getenv("TEMP", "65535"), "$(const.dirsep)TEST.cfengine");
      "testfile" string => concat(getenv("TEMP", "65535"), "$(const.dirsep)TEST.cfengine");

    !temp_declared::
      "testroot" string => "$(const.dirsep)tmp";
      "testdir" string => "$(const.dirsep)tmp$(const.dirsep)TEST.cfengine";
      "testfile" string => "$(const.dirsep)tmp$(const.dirsep)TEST.cfengine";

}

bundle common paths_init(filename)
{
  classes:
      "filename_absolute" expression => regcmp("/.*", "$(filename)");
}

bundle common paths_absolute(filename)
{
  vars:
    filename_absolute::
      "input_file"
      string => "$(filename)";
    !filename_absolute::
      "input_file"
      string => "$(G.cwd)/$(filename)";
}

bundle agent default(filename)
{
  methods:
      "any" usebundle => test_precheck;

    proceed_with_test::
      "any" usebundle => test_run("$(filename)");
}

bundle agent test_precheck
{
  vars:
      "test_skip_unsupported" slist => variablesmatching(".*_meta\.test_skip_unsupported");
      "test_skip_needs_work" slist => variablesmatching(".*_meta\.test_skip_needs_work");
      "test_suppress_fail" slist => variablesmatching(".*_meta\.test_suppress_fail");
      "test_suppress_fail_metatags" slist => getvariablemetatags("$(test_suppress_fail)");
      "test_suppress_fail_redmine" slist => filter("redmine.*", "test_suppress_fail_metatags", "true", "false", 1);

  classes:
      "test_skip_unsupported_set" expression => some(".*", "test_skip_unsupported");
      "test_skip_needs_work_set" expression => some(".*", "test_skip_needs_work");
      "test_suppress_fail_set" expression => some(".*", "test_suppress_fail");
      "test_suppress_fail_redmine_set" expression => some(".*", "test_suppress_fail_redmine");

      "test_skip_unsupported_match" and => { "test_skip_unsupported_set", "$($(test_skip_unsupported))" };
      "test_skip_needs_work_match" and => { "test_skip_needs_work_set", "$($(test_skip_needs_work))" };
      "test_suppress_fail_match" and => { "test_suppress_fail_set", "$($(test_suppress_fail))" };

      "proceed_with_test"
      and => { "!test_skip_unsupported_match", "!test_skip_needs_work_match" },
      scope => "namespace";

  reports:
    test_skip_unsupported_match::
      "$(this.promise_filename) Skip/unsupported";
    test_skip_needs_work_match::
      "$(this.promise_filename) Skip/needs_work";
    test_suppress_fail_match.test_suppress_fail_redmine_set::
      "$(this.promise_filename) XFAIL/$(test_suppress_fail_redmine)";
    test_suppress_fail_match.!test_suppress_fail_redmine_set::
      "$(this.promise_filename) FAIL/no_redmine_number";
}

bundle agent test_run(filename)
{
  vars:
      "tests" slist => { "init", "test", "check" };

  methods:
      "any"
      usebundle => paths_init("$(filename)");
      "any"
      usebundle => paths_absolute("$(filename)");

    AUTO::
      "any" usebundle => "$(tests)";

  reports:
    !AUTO::
      "# You must either specify '-D AUTO' or run the following commands:";
      "cf-agent -f .$(const.dirsep)$(filename) -b $(tests)";
}

#######################################################

bundle agent default_sort(infile, outfile)
{
  commands:
      "$(G.sort) $(infile) > $(outfile)"
      contain => default_shell_command;
}

bundle agent default_check_diff(file1, file2, test)
{
  methods:
      "any" usebundle => check_diff("$(file1)", "$(file2)", "$(test)", "no");
}

bundle agent sorted_check_diff(file1, file2, test)
{
  methods:
      "any" usebundle => default_sort("$(file1)", "$(file1).sort");
      "any" usebundle => default_sort("$(file2)", "$(file2).sort");
      "any" usebundle => check_diff("$(file1).sort", "$(file2).sort", "$(test)", "no");
}

bundle agent xml_check_diff(file1, file2, test, expected_difference)
{
  vars:
    DEBUG.check_ready.!no_difference::
      "file1r" string => execresult("$(G.cwd)/xml-c14nize $(file1)", "noshell");
      "file2r" string => execresult("$(G.cwd)/xml-c14nize $(file2)", "noshell");

    DEBUG.check_ready.!no_difference.has_hexdump::
      "file1h" string => execresult("$(G.hexdump) -C $(file1)", "useshell");
      "file2h" string => execresult("$(G.hexdump) -C $(file2)", "useshell");

    DEBUG.check_ready.!no_difference.!has_hexdump::
      "file1h" string => execresult("$(G.od) -c $(file1)", "useshell");
      "file2h" string => execresult("$(G.od) -c $(file2)", "useshell");

    DEBUG.check_ready.!no_difference.has_unified_diff::
      "diffu" string => execresult("$(G.diff) -u $(file2) $(file1) 2>$(G.dev_null)", "useshell");
    DEBUG.check_ready.!no_difference.!has_unified_diff::
      "diffu" string => execresult("$(G.diff) -c $(file2) $(file1) 2>$(G.dev_null)", "useshell");

  classes:
      "has_unified_diff" expression => returnszero(
                                                    "$(G.diff) -u $(G.etc_null) $(G.etc_null) >$(G.dev_null) 2>&1", "useshell");

    c14n_files_created::
      "no_difference" expression => returnszero(
                                                 "$(G.diff) $(G.testfile).default-xml-check-diff-1 $(G.testfile).default-xml-check-diff-2 >$(G.dev_null) 2>&1",
                                                 "useshell");

      "expected_difference" expression => strcmp("$(expected_difference)", "yes");
      "check_ready" expression => "any";

  commands:
      "$(G.cwd)/xml-c14nize $(file1) > $(G.testfile).default-xml-check-diff-1"
      contain => default_cf_sub_shell;
      "$(G.cwd)/xml-c14nize $(file2) > $(G.testfile).default-xml-check-diff-2"
      contain => default_cf_sub_shell,
      classes => default_cf_sub_if_ok("c14n_files_created");

  reports:
    check_ready.no_difference.!expected_difference::
      "$(test) Pass";
    check_ready.!no_difference.expected_difference::
      "$(test) Pass";
    check_ready.!no_difference.!expected_difference::
      "$(test) FAIL";
    check_ready.no_difference.expected_difference::
      "$(test) FAIL";

    DEBUG.check_ready.!no_difference.!expected_difference::
      "$(file1) and $(file2) differ:";
      "$(file1): <$(file1r)>";
      "$(file2): <$(file2r)>";
      "dump $(file1):
$(file1h)";
      "dump $(file2):
$(file2h)";
      "$(diffu)";
    DEBUG.check_ready.no_difference.expected_difference::
      "Contents of $(file1) and $(file) is the same.";
}

body contain default_cf_sub_shell
{
      useshell => "true";
}

body action default_cf_sub_immediate
{
      ifelapsed => "0";
}

body classes default_cf_sub_if_ok(x)
{
      promise_repaired => { "$(x)" };
      promise_kept => { "$(x)" };
}

body classes default_cf_sub_if_repaired(x)
{
      promise_repaired => { "$(x)" };
}

body classes default_cf_sub_scoped_generic_classes(x, scope)
{
      scope => "$(scope)";
      promise_repaired => { "promise_repaired_$(x)", "$(x)_repaired", "$(x)_ok", "$(x)_reached" };
      repair_failed => { "repair_failed_$(x)", "$(x)_failed", "$(x)_not_ok", "$(x)_not_kept", "$(x)_not_repaired", "$(x)_reached" };
      repair_denied => { "repair_denied_$(x)", "$(x)_denied", "$(x)_not_ok", "$(x)_not_kept", "$(x)_not_repaired", "$(x)_reached" };
      repair_timeout => { "repair_timeout_$(x)", "$(x)_timeout", "$(x)_not_ok", "$(x)_not_kept", "$(x)_not_repaired", "$(x)_reached" };
      promise_kept => { "promise_kept_$(x)", "$(x)_kept", "$(x)_ok", "$(x)_not_repaired", "$(x)_reached" };
}

bundle agent default_cf_sub_report_generic_classes(x)
{
  vars:
      "choices" slist => { "repaired", "failed", "denied", "timeout", "kept" };

  reports:
    DEBUG::
      "class '$(x)_$(choices)' was defined" ifvarclass => '$(x)_$(choices)';
      "class '$(x)_$(choices)' was NOT defined" ifvarclass => '!$(x)_$(choices)';
}

# To set classes unconditionally. Useful when you need to set a class after a promise,
# regardless of outcome.
body classes default_cf_sub_set_class(x)
{
      promise_repaired => { "$(x)" };
      promise_kept => { "$(x)" };
      repair_failed => { "$(x)" };
      repair_denied => { "$(x)" };
      repair_timeout => { "$(x)" };
}

bundle agent check_diff(file1, file2, test, expected_difference)
{
  vars:
    DEBUG.check_ready.!no_difference::
      "file1r" string => readfile("$(file1)", "99999999");
      "file2r" string => readfile("$(file2)", "99999999");

    DEBUG_HEXDUMP.check_ready.!no_difference.has_hexdump::
      "file1h" string => execresult("$(G.hexdump) -C $(file1)", "useshell");
      "file2h" string => execresult("$(G.hexdump) -C $(file2)", "useshell");

    DEBUG_HEXDUMP.check_ready.!no_difference.!has_hexdump::
      "file1h" string => execresult("$(G.od) -c $(file1)", "useshell");
      "file2h" string => execresult("$(G.od) -c $(file2)", "useshell");

    DEBUG.check_ready.!no_difference.has_unified_diff::
      "diffu" string => execresult("$(G.diff) -u $(file2) $(file1) 2>$(G.dev_null)", "useshell");
    DEBUG.check_ready.!no_difference.!has_unified_diff::
      "diffu" string => execresult("$(G.diff) -c $(file2) $(file1) 2>$(G.dev_null)", "useshell");

  classes:
      "has_unified_diff" expression => returnszero(
                                                    "$(G.diff) -u $(G.etc_null) $(G.etc_null) >$(G.dev_null) 2>&1", "useshell");

      "no_difference" expression => returnszero(
                                                 "$(G.diff) $(file1) $(file2) >$(G.dev_null) 2>&1",
                                                 "useshell");

      "expected_difference" expression => strcmp("$(expected_difference)", "yes");
      "check_ready" expression => "any";

  reports:
    check_ready.no_difference.!expected_difference::
      "$(test) Pass";
    check_ready.!no_difference.expected_difference::
      "$(test) Pass";
    check_ready.!no_difference.!expected_difference::
      "$(test) FAIL";
    check_ready.no_difference.expected_difference::
      "$(test) FAIL";

    DEBUG.check_ready.!no_difference.!expected_difference::
      "FILES DIFFER BUT SHOULD BE THE SAME";
      "CONTENTS OF $(file1):
$(file1r)";
      "CONTENTS OF $(file2):
$(file2r)";
      "$(diffu)";
    DEBUG_HEXDUMP.check_ready.!no_difference.!expected_difference::
      "hexdump $(file1):
$(file1h)";
      "hexdump $(file2):
$(file2h)";
    DEBUG.check_ready.no_difference.expected_difference::
      "Contents of $(file1) and $(file) are the same but should differ.";
}

body contain default_shell_command
{
      useshell => "true";
}

#######################################################

# Uses rm -rf instead of selecting and deleting files to avoid side-effects in
# tests due to problems in file deleletion promises.

bundle agent default_fini(file)
{
  commands:
      "$(G.rm) -rf $(file)*"
      contain => useshell;
      "$(G.rm) -rf $(sys.workdir)/state/cf_state.*"
      contain => useshell;
}

bundle agent default_cf_sub_copydir(from, to)
{
  files:
      "$(to)/."
      create => "true",
      depth_search => default_cf_sub_recurse("inf"),
      copy_from => default_cf_sub_sync($(from));
}

bundle agent default_cf_sub_copyfile(from, to)
{
  files:
      "$(to)"
      create => "true",
      copy_from => default_cf_sub_sync($(from));
}

body depth_search default_cf_sub_recurse(d)

{
      depth => "$(d)";
      xdev  => "true";
}

body copy_from default_cf_sub_sync(f)
{
      source => "$(f)";
      purge => "true";
      preserve => "false";
      type_check => "false";
      compare => "digest";
}

bundle agent default_cf_sub_makefile(file, str)
{
  files:
      "$(file)"
      create => "true",
      edit_line => default_cf_sub_insert($(str)),
      edit_defaults => default_cf_sub_empty;
  reports:
    DEBUG::
      "$(this.bundle): creating $(file) with contents '$(str)'";
}

bundle agent default_cf_sub_emptyfile(file)
{
  files:
      "$(file)"
      create => "true",
      edit_defaults => default_cf_sub_empty;
  reports:
    DEBUG::
      "$(this.bundle): creating empty $(file) with 0 size";
}

bundle edit_line default_cf_sub_insert(str)
{
  insert_lines:
      "$(str)";
}

body edit_defaults default_cf_sub_empty
{
      empty_file_before_editing => "true";
}

body perms default_cf_sub_mog(mode,user,group)
{
      owners => { "$(user)" };
      groups => { "$(group)" };
      mode   => "$(mode)";
}

body perms default_cf_sub_mode(mode)
{
      mode   => "$(mode)";
}

body contain useshell
{
      useshell => "true";
      chdir => "/";
}

#######################################################
# Test based on whether two strings are the same

bundle agent default_check_strcmp(strA, strB, test, expected_difference)
{
  classes:
      "equal" expression => strcmp($(strA), $(strB));
      "expected_difference" or => { strcmp($(expected_difference), "yes"),
                                    strcmp($(expected_difference), "true") };
  reports:
    DEBUG::
      "STRING A: '$(strA)'";
      "STRING B: '$(strB)'";
    equal.!expected_difference::
      "$(test) Pass";
    equal.expected_difference::
      "$(test) FAIL";
    !equal.!expected_difference::
      "$(test) FAIL";
    !equal.expected_difference::
      "$(test) Pass";
}

#######################################################
# Test based on whether a string matches a regular expression

bundle agent default_check_regcmp(regex, thestring, test, expected_mismatch)
{
  classes:
      "matched" expression => regcmp($(regex), $(thestring));
      "expected_mismatch" or => { strcmp($(expected_mismatch), "yes"),
                                  strcmp($(expected_mismatch), "true") };
  reports:
    DEBUG::
      "REGEX: '$(regex)'";
      "STRING TO MATCH: '$(thestring)'";
    matched.!expected_mismatch::
      "$(test) Pass";
    matched.expected_mismatch::
      "$(test) FAIL";
    !matched.!expected_mismatch::
      "$(test) FAIL";
    !matched.expected_mismatch::
      "$(test) Pass";
}

#######################################################
# Pass the test if class

bundle agent default_passif(classname, test)
{
  reports:
      "$(test) Pass" ifvarclass => $(classname);
      "$(test) FAIL" ifvarclass => "!$(classname)";
}
